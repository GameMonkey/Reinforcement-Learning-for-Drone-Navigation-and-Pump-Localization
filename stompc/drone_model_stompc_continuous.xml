<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// State
int x = //TAG_x;
int y = //TAG_y;
double yaw = //TAG_yaw;
int map_width = //TAG_width_map;
int map_height = //TAG_height_map;
int actions_taken = 0;
//TAG_map;
//TAG_visited;

int current_step_length = 0;

// Actions, interger values in the interval [-1,6] corrosponds to an action
//    -1: No action
//
//     Moving: 
//          0: West,
//          1: South,
//          2: East,
//          3: North
//     Turning:
//          4: Turn left half a PI, 90 degrees
//          5: Turn right half a PI, 90 degrees
//          6: Rotate a full PI, 180 degrees &lt;- not used currently.
int action = -1;

// Utilitise
const double e = 0.5;
const double e_yaw = 0.2;
const double PI_upper = 3.14;
const double PI_lower = -3.14;
const double PI_half_pos = 1.57;
const double PI_half_neg = -1.57;
const double map_granularity = //TAG_granularity_map;

// Drone specs, all values in meters
const double drone_diameter = //TAG_drone_diameter;
const double safety_range = //TAG_safety_range;
const int laser_range = //TAG_range_laser;
const int laser_range_diameter = //TAG_laser_range_diameter;



const double closest_safe_distance = 1.0;

const double half_PI_right = 1.57;   // 90 degrees right
const double half_PI_left = -1.57;   // 90 degrees left
const double full_PI_turn = 3.14;    // 180 degress turn

// Rewards / training
//          0: West / yaw = -1.57 (+y),
//          1: South / yaw = 0 (+x)
//          2: East / yaw = 1.57 (-y),
//          3: North / yaw = 3.14 or -3.14 (-x)

const double discovery_reward = //TAG_discovery_reward;
const double turning_cost = //TAG_turning_cost;
const double moving_cost = //TAG_moving_cost;
const double pump_exploration_reward = //TAG_pump_exploration_reward;
const double visited_cost = //TAG_visited_cost;
const bool open = //TAG_open;
const int horizon = //TAG_horizon;

double accum_reward = 0;
double accum_penalty = 0;

const double upper_range_pump_detection = //TAG_upper_pump_detection_range;
const double lower_range_pump_detection = 0.55;

bool has_visited() {
    for (i : int[0,horizon-1]) {
        if (visited[i][0] == x &amp;&amp; visited[i][1] == y &amp;&amp; visited[i][2] == yaw){
            return true;
        }
    }
    return false;
}

void calculate_reward() {
    int cells_updated = 0; // The number of cells that have been discovered / changed from unknown
    int N_forward_cells_to_update = fint(laser_range / map_granularity); // Gives us the number of drones to check in front of the drone
    int N_diameter_cells_to_update = fint(laser_range_diameter / map_granularity); // Gives us the number of cells to update in to the left and right of the drone
    int upper_range_pump_detection_cells = fint(upper_range_pump_detection / map_granularity);
    int lower_range_pump_detection_cells = fint(lower_range_pump_detection / map_granularity);

    if(N_forward_cells_to_update % 2 == 0) {
        N_forward_cells_to_update += 1;
    }

    if(N_diameter_cells_to_update % 2 == 0) {
        N_diameter_cells_to_update += 1;
    }

    if(PI_half_neg - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_half_neg + e_yaw) { // exploring in positive y direction
        int lower_bound_x = x - (N_diameter_cells_to_update / 2);
        int upper_bound_x = x + (N_diameter_cells_to_update / 2);
        int upper_bound_y = y + N_forward_cells_to_update;

        int i;
        int j;
        int jj;
        int ui = x;
        int li = x-1;

        if(lower_bound_x &lt; 0) {
            lower_bound_x = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_x &gt; map_width){
            upper_bound_x = map_width; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_y &gt; map_height){
            upper_bound_y = map_height; // if we are reaching a point where the range of the drone would go outside the map in the posivtive direction, we set the upper bound for y to map height
        }

         while(lower_bound_x &lt;= li || ui &lt; upper_bound_x){
            for(j = y + 1; j &lt; upper_bound_y; j++) {
                if(ui &lt; upper_bound_x){
                    if(map[j][ui] == 100) {
                        if(j == y + 1) {
                            ui = upper_bound_x;
                        }
                        j = upper_bound_y;
                    }
                    else if(map[j][ui] == 2) {
                        if(abs(j - y) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[j][ui] = 3;

                        }
                        
                    }
                    else if(map[j][ui] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[j][ui] = 100;
                            j = upper_bound_y;
                        }else {
                        map[j][ui] = 0;
                        }
                    }
                }
            }

            for(j = y + 1; j &lt; upper_bound_y; j++){                
                if(lower_bound_x &lt;= li){
                    if(map[j][li] == 100) {
                        if(j == y + 1) {
                            li = lower_bound_x - 1;
                        }
                        j = upper_bound_y;
                    }
                    else if(map[j][li] == 2) {
                        if(abs(j - y) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[j][li] = 3;
                        }
                    }
                    else if(map[j][li] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[j][li] = 100;
                            j = upper_bound_y;
                        }else {
                            map[j][li] = 0;
                        }
                    }
                }
            }
            ui += 1;
            li -= 1;
        }
    }else if(0 - e_yaw &lt; yaw &amp;&amp; yaw &lt; 0 + e_yaw) { // exploring in positive x direction
        int lower_bound_y = y - (N_diameter_cells_to_update / 2);
        int upper_bound_y = y +  (N_diameter_cells_to_update / 2);
        int upper_bound_x = x + N_forward_cells_to_update;

        int i;
        int j;
        int uj = y;
        int lj = y-1;

        if(lower_bound_y &lt; 0) {
            lower_bound_y = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_y &gt; map_height){
            upper_bound_y = map_height; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_x &gt; map_width){
            upper_bound_x = map_width; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }

        while(lower_bound_y &lt;= lj || uj &lt; upper_bound_y) {
            for(i = x + 1; i &lt; upper_bound_x; i++) {
             
                if(uj &lt; upper_bound_y) {
                    
                    if(map[uj][i] == 100) {
                        if(i == x + 1) {
                            uj = upper_bound_y;
                        }
                        i = upper_bound_x;

                    }
                    else if(map[uj][i] == 2) {
                            if(abs(i - x) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[uj][i] = 3;
                        }
                        
                    }
                    else if(map[uj][i] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[uj][i] = 100;
                            i = upper_bound_x;
                        }else {
                            map[uj][i] = 0;
                        }
                    }
                }
            }
            
            for(i = x + 1; i &lt; upper_bound_x; i++){
                if(lower_bound_y &lt;= lj){
                    if(map[lj][i] == 100) {
                        if( i == x + 1) {
                            lj = lower_bound_y - 1;
                        }                        
                        i = upper_bound_x;                   
                    }
                    else if(map[lj][i] == 2) {
                        if(abs(i - x) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[lj][i] = 3;
                        }
                        
                    }
                    else if(map[lj][i] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[lj][i] = 100;
                            i = upper_bound_x;
                        }else {
                            map[lj][i] = 0;
                        }
                    }
                }
            }
            uj += 1;
            lj -= 1;
        }
    }else if(PI_half_pos - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_half_pos + e_yaw) { // exploring in negative y direction
        int lower_bound_x = x - (N_diameter_cells_to_update / 2);
        int upper_bound_x = x + (N_diameter_cells_to_update / 2);
        int upper_bound_y = y - N_forward_cells_to_update;

        int i;
        int j;
        int ui = x;
        int li = x;

        if(lower_bound_x &lt; 0) {
            lower_bound_x = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_x &gt; map_width){
            upper_bound_x = map_width; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_y &lt; 0){
            upper_bound_y = 0; // if we are reaching a point where the range of the drone would go outside the map in the negative direction, we set the upper bound for y to 0
        }

        while(lower_bound_x &lt;= li || ui &lt; upper_bound_x){
            for(j = y; j &gt;= upper_bound_y; j--) {
                if(ui &lt; upper_bound_x){
                    if(map[j][ui] == 100) {
                        if(j == y) {
                             ui = upper_bound_x;
                        }
                        j = upper_bound_y;
                       
                    }
                    else if(map[j][ui] == 2) {
                        if(abs(j - y) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[j][ui] = 3;
                         }
                        
                    }
                    else if(map[j][ui] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[j][ui] = 100;
                            j = upper_bound_y;
                        }else {
                        map[j][ui] = 0;
                        }
                    }
                }
            }
            
            for(j = y; j &gt;= upper_bound_y; j--){                
                if(lower_bound_x &lt;= li){
                    if(map[j][li] == 100) {
                        if(j == y) {
                           li = lower_bound_x-1;
                        }
                        j = upper_bound_y;
                    }
                    else if(map[j][li] == 2) {
                        if(abs(j - y) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[j][li] = 3;
                        }
                        
                    }
                    else if(map[j][li] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[j][li] = 100;
                            j = upper_bound_y;
                        }else {
                            map[j][li] = 0;
                        }
                    }
                }
            }
            
            ui += 1;
            li -= 1;
        }
    }else if((PI_lower - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_lower + e_yaw) || (PI_upper - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_upper + e_yaw)) { // exploring in negative x direction
        int lower_bound_y = y - (N_diameter_cells_to_update / 2);
        int upper_bound_y = y +  (N_diameter_cells_to_update / 2);
        int upper_bound_x = x - N_forward_cells_to_update;

        int i;
        int j;
        int uj = y;
        int lj = y-1;

        if(lower_bound_y &lt; 0) {
            lower_bound_y = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_y &gt; map_height){
            upper_bound_y = map_height; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_x &lt; 0){
            upper_bound_x = 0; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }

         while(lower_bound_y &lt;= lj || uj &lt; upper_bound_y) {
            for(i = x - 1; i &gt;= upper_bound_x; i--) {
                if(uj &lt; upper_bound_y) {
                    if(map[uj][i] == 100) {

                        if(i == x -1) {
                           uj = upper_bound_y;
                        }
                        i = upper_bound_x;
                    }
                    else if(map[uj][i] == 2) {
                        if(abs(i - x) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[uj][i] = 3;
                        }
                        
                    }
                    else if(map[uj][i] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[uj][i] = 100;
                            i = upper_bound_x;
                        }else {
                            map[uj][i] = 0;
                        }
                    }
                }
            }
             
            for(i = x - 1; i &gt;= upper_bound_x; i--) {   
                if(lower_bound_y &lt;= lj){
                    if(map[lj][i] == 100) {
                        if(i == x-1) {
                            lj = lower_bound_y-1;
                        }
                        i = upper_bound_x;
                    }
                    else if(map[lj][i] == 2) {
                        if(abs(i - x) &lt;= upper_range_pump_detection_cells) {
                            accum_reward = accum_reward + (pump_exploration_reward * (1.0 / actions_taken));
                            map[lj][i] = 3;
                        }
                        
                    }
                    else if(map[lj][i] == -1) {
                        accum_reward = accum_reward + (discovery_reward * (1.0 / actions_taken));
                        if(!open){
                            map[lj][i] = 100;
                            i = upper_bound_x;
                        }else {
                            map[lj][i] = 0;
                        }
                    }
                }
            } 

            uj += 1;
            lj -= 1;
        }
    }
}

// Channels
broadcast chan action_completed;
broadcast chan move_north, move_south, move_east, move_west;
broadcast chan turn_90deg_left, turn_90deg_right, turn_180deg;</declaration>
	<template>
		<name x="5" y="5">DroneController</name>
		<declaration>clock c;




//          0: West (+y),
//          1: South (+x)
//          2: East (-y),
//          3: North (-x)
bool can_move(int action, double step_length) {
    int N_cells_in_dir = fint((step_length / 2) / map_granularity);
    int drone_cells_to_cover = fint((drone_diameter) / map_granularity);
    int safety_range_cells = fint(safety_range / map_granularity);

    if(drone_cells_to_cover % 2 == 0) {
        drone_cells_to_cover += 1;
    }

    if(step_length == 2.0) {
        step_length = 2.0;
    }else if(step_length == -2.0) {
        step_length = -2.0;
    }else if(step_length == 2.0) {
        step_length = 2.0;
    }else if(step_length == -2.0) {
        step_length = -2.0;
    }

    N_cells_in_dir = fint((step_length / 2) / map_granularity);


    if(action == 0) {
        int lower_bound_x = x - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_x = x +  (drone_cells_to_cover / 2) + safety_range_cells;
        int upper_bound_y = y + N_cells_in_dir + safety_range_cells;

        int i;
        int j;

        if(lower_bound_x &lt; 0 || upper_bound_x &gt; map_width || upper_bound_y &gt; map_height) {
            return false;
        }
        for(i = lower_bound_x; i &lt; upper_bound_x; i++) {
            for(j = y + (drone_cells_to_cover / 2); j &lt; upper_bound_y; j++) {
                if( map[j][i] == 100 || map[j][i] == -1) {
                    return false;
                }
            }
        }
        return true;
    }else if(action == 1) {
        int lower_bound_y = y - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_y = y +  (drone_cells_to_cover / 2) + safety_range_cells;
        int upper_bound_x = x + N_cells_in_dir + safety_range_cells;

        int i;
        int j;

         if(lower_bound_y &lt; 0 || upper_bound_y &gt; map_height || upper_bound_x &gt; map_width) {
            return false;
        }
        for(i = x + (drone_cells_to_cover / 2); i &lt; upper_bound_x; i++) {
            for(j = lower_bound_y; j &lt; upper_bound_y; j++) {
                if(map[j][i] == 100 || map[j][i] == -1) {
                    return false;
                }
            }
        }
        return true;
    }else if(action == 2) {
        int lower_bound_x = x - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_x = x +  (drone_cells_to_cover / 2) + safety_range_cells;
        int lower_bound_y = y - N_cells_in_dir - safety_range_cells;

        int i;
        int j;

        if(lower_bound_x &lt; 0 || upper_bound_x &gt; map_width || lower_bound_y &lt; 0) {
            return false;
        }
        for(i = lower_bound_x; i &lt; upper_bound_x; i++) {
            for(j = y - (drone_cells_to_cover / 2); j &gt;= lower_bound_y; j--) {
                if(map[j][i] == 100 || map[j][i] == -1) {
                    return false;
                }
            }
        }
        return true;
    }else if(action == 3) {
        int lower_bound_y = y - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_y = y +  (drone_cells_to_cover / 2) + safety_range_cells;
        int lower_bound_x = x - N_cells_in_dir - safety_range_cells;

        int i;
        int j;

       if(lower_bound_y &lt; 0 ||upper_bound_y &gt; map_height || lower_bound_x &lt; 0) {
            return false;
        }
        for(i = x - (drone_cells_to_cover / 2); i &gt;= lower_bound_x; i--) {
            for(j = lower_bound_y; j &lt; upper_bound_y; j++) {
                if(map[j][i] == 100 || map[j][i] == -1) {
                    return false;
                }
            }
        }
        return true;
    }
    return false;
}</declaration>
		<location id="id0" x="892" y="238">
			<name x="833" y="255">DescisionState</name>
		</location>
		<location id="id1" x="1419" y="246">
		</location>
		<location id="id2" x="620" y="238">
		</location>
		<location id="id3" x="892" y="85">
		</location>
		<location id="id4" x="892" y="-51">
			<name x="875" y="-85">target</name>
		</location>
		<location id="id5" x="1122" y="263">
			<name x="1147" y="221">south</name>
			<committed/>
		</location>
		<location id="id6" x="1139" y="144">
			<name x="1105" y="110">north</name>
			<committed/>
		</location>
		<location id="id7" x="1139" y="331">
			<name x="1122" y="297">east</name>
			<committed/>
		</location>
		<location id="id8" x="1139" y="408">
			<name x="1122" y="374">west</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id9" controllable="false">
			<source ref="id8"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1249" y="382">move_west!</label>
			<nail x="1411" y="408"/>
		</transition>
		<transition id="id10" controllable="false">
			<source ref="id7"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1241" y="314">move_east!</label>
			<nail x="1360" y="331"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1241" y="238">move_south!</label>
			<nail x="1283" y="263"/>
		</transition>
		<transition id="id12" controllable="false">
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1266" y="170">move_north!</label>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="833" y="136">0 == 0</label>
		</transition>
		<transition id="id14">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="901" y="-17">0 == 1</label>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="1062" y="59">action_completed?</label>
			<nail x="1419" y="85"/>
		</transition>
		<transition id="id16" controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="680" y="59">action_completed?</label>
			<nail x="620" y="85"/>
		</transition>
		<transition id="id17">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="680" y="246">turn_90deg_right!</label>
			<nail x="833" y="263"/>
			<nail x="663" y="263"/>
		</transition>
		<transition id="id18">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="697" y="187">turn_90deg_left!</label>
			<nail x="841" y="204"/>
			<nail x="697" y="204"/>
		</transition>
		<transition id="id19">
			<source ref="id0"/>
			<target ref="id8"/>
			<label kind="select" x="909" y="374">step_length : int [1,2]</label>
			<label kind="guard" x="909" y="391">can_move(0,step_length)</label>
			<label kind="assignment" x="858" y="408">current_step_length = step_length</label>
			<nail x="892" y="408"/>
			<nail x="1122" y="408"/>
		</transition>
		<transition id="id20">
			<source ref="id0"/>
			<target ref="id7"/>
			<label kind="select" x="943" y="297">step_length : int [1,2]</label>
			<label kind="guard" x="943" y="314">can_move(2, step_length)</label>
			<label kind="assignment" x="901" y="331">current_step_length = step_length</label>
			<nail x="935" y="331"/>
			<nail x="1122" y="331"/>
		</transition>
		<transition id="id21">
			<source ref="id0"/>
			<target ref="id5"/>
			<label kind="select" x="952" y="212">step_length : int [1,2]</label>
			<label kind="guard" x="960" y="229">can_move(1, step_length)</label>
			<label kind="assignment" x="926" y="263">current_step_length = step_length</label>
		</transition>
		<transition id="id22">
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="select" x="909" y="119">step_length : int [1,2]</label>
			<label kind="guard" x="909" y="136">can_move(3, step_length)</label>
			<label kind="assignment" x="901" y="153">current_step_length = step_length</label>
		</transition>
	</template>
	<template>
		<name>TurningActions</name>
		<declaration>clock c;

void turn_drone(double yaw_dx) {
    if(yaw &gt;=PI_upper &amp;&amp; yaw_dx &gt; 0) {
        yaw = PI_lower + yaw_dx;
    } else if (yaw &lt;= PI_lower &amp;&amp; yaw_dx &lt; 0) {
        yaw = PI_upper + yaw_dx;
    }else if(yaw + yaw_dx &gt; PI_upper) {
        if(yaw == PI_half_pos || yaw == PI_half_neg) {
            yaw = yaw * -1;
        }else {
            yaw = PI_lower + yaw_dx;
        }
    }else {
        yaw = yaw + yaw_dx;
    }

    accum_penalty = accum_penalty - turning_cost;
    actions_taken += 1;

    if (has_visited()) {
        accum_penalty = accum_penalty - visited_cost;
    }else {
        visited[actions_taken][0] = x;
        visited[actions_taken][1] = y;
        visited[actions_taken][2] = yaw;
    }

    calculate_reward();
}</declaration>
		<location id="id23" x="-59" y="-136">
			<name x="-85" y="-119">waiting</name>
		</location>
		<location id="id24" x="-459" y="-136">
			<name x="-476" y="-178">LEFT</name>
			<label kind="invariant" x="-484" y="-110">c &lt;= 1</label>
		</location>
		<location id="id25" x="349" y="-136">
			<name x="324" y="-178">RIGHT</name>
			<label kind="invariant" x="324" y="-110">c &lt;= 1</label>
		</location>
		<location id="id26" x="-59" y="-425">
			<name x="-102" y="-459">TURN_180_DEG</name>
			<label kind="invariant" x="-85" y="-476">c &lt;= 1</label>
		</location>
		<init ref="id23"/>
		<transition id="id27" controllable="false">
			<source ref="id26"/>
			<target ref="id23"/>
			<label kind="guard" x="25" y="-340">c == 1</label>
			<label kind="synchronisation" x="25" y="-323">action_completed!</label>
			<label kind="assignment" x="25" y="-306">c = 0,
action = -1</label>
			<nail x="17" y="-348"/>
			<nail x="17" y="-195"/>
		</transition>
		<transition id="id28" controllable="false">
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-161" y="-391">turn_180deg?</label>
			<label kind="assignment" x="-161" y="-365">c = 0,
action = 6,
turn_drone(PI_upper)</label>
		</transition>
		<transition id="id29" controllable="false">
			<source ref="id25"/>
			<target ref="id23"/>
			<label kind="guard" x="60" y="-85">c == 1</label>
			<label kind="synchronisation" x="59" y="-25">action_completed!</label>
			<label kind="assignment" x="59" y="-68">c = 0,
action = -1</label>
			<nail x="264" y="-93"/>
			<nail x="26" y="-93"/>
		</transition>
		<transition id="id30" controllable="false">
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-314" y="-221">c == 1</label>
			<label kind="synchronisation" x="-314" y="-272">action_completed!</label>
			<label kind="assignment" x="-314" y="-255">c = 0,
action = -1</label>
			<nail x="-357" y="-195"/>
			<nail x="-145" y="-195"/>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="76" y="-161">turn_90deg_right?</label>
			<label kind="assignment" x="76" y="-221">c = 0,
action = 5,
turn_drone(half_PI_right)</label>
		</transition>
		<transition id="id32" controllable="false" color="#a9a9a9">
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-348" y="-135">turn_90deg_left?</label>
			<label kind="assignment" x="-348" y="-110">c = 0,
action = 4,
turn_drone(half_PI_left)</label>
		</transition>
	</template>
	<template>
		<name>MovingActions</name>
		<declaration>
clock c;

void move(double dir_x, double dir_y) { 
    if(dir_x == 1.0) {
        dir_x = 0.5;
    }else if(dir_x == -1.0) {
        dir_x = -0.5;
    }else if(dir_y == 1.0) {
        dir_y = 0.5;
    }else if(dir_y == -1.0) {
        dir_y = -0.5;
    }

    if(dir_x == 2.0) {    
        dir_x = 1.0;
    }else if(dir_x == -2.0) {
        dir_x = -1.0;
    }else if(dir_y == 2.0) {
        dir_y = 1.0;
    }else if(dir_y == -2.0) {
        dir_y = -1.0;
    }
    x = x + fint(((dir_x) / map_granularity));
    y = y + fint(((dir_y) / map_granularity));

    accum_penalty = accum_penalty;
    actions_taken += 1;


    if (has_visited()) {
        accum_penalty = accum_penalty - visited_cost;
    }else {
        visited[actions_taken][0] = x;
        visited[actions_taken][1] = y;
        visited[actions_taken][2] = yaw;
    }

    calculate_reward();
}</declaration>
		<location id="id33" x="238" y="110">
			<name x="228" y="76">waiting</name>
		</location>
		<location id="id34" x="238" y="459">
			<name x="221" y="476">SOUTH</name>
			<label kind="invariant" x="263" y="450">c &lt;= 1</label>
		</location>
		<location id="id35" x="-162" y="110">
			<name x="-179" y="68">WEST</name>
			<label kind="invariant" x="-187" y="136">c &lt;= 1</label>
		</location>
		<location id="id36" x="646" y="110">
			<name x="621" y="68">EAST</name>
			<label kind="invariant" x="621" y="136">c &lt;= 1</label>
		</location>
		<location id="id37" x="238" y="-238">
			<name x="221" y="-272">NORTH</name>
			<label kind="invariant" x="264" y="-246">c &lt;= 1</label>
		</location>
		<init ref="id33"/>
		<transition id="id38" controllable="false">
			<source ref="id36"/>
			<target ref="id33"/>
			<label kind="guard" x="357" y="161">c == 1</label>
			<label kind="synchronisation" x="358" y="216">action_completed!</label>
			<label kind="assignment" x="357" y="178">c = 0,
action = -1</label>
			<nail x="561" y="153"/>
			<nail x="323" y="153"/>
		</transition>
		<transition id="id39" controllable="false">
			<source ref="id35"/>
			<target ref="id33"/>
			<label kind="guard" x="0" y="25">c == 1</label>
			<label kind="synchronisation" x="-17" y="-25">action_completed!</label>
			<label kind="assignment" x="0" y="-9">c = 0,
action = -1</label>
			<nail x="-60" y="51"/>
			<nail x="152" y="51"/>
		</transition>
		<transition id="id40" controllable="false">
			<source ref="id33"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="416" y="76">move_east?</label>
			<label kind="assignment" x="416" y="17">move(0, -current_step_length),
c = 0,
action = 2 + (current_step_length * 10)</label>
		</transition>
		<transition id="id41" controllable="false" color="#a9a9a9">
			<source ref="id33"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-51" y="85">move_west?</label>
			<label kind="assignment" x="-51" y="119">move(0, current_step_length),
c = 0,
action = 0 + (current_step_length * 10)</label>
		</transition>
		<transition id="id42" controllable="false">
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="136" y="289">c == 1</label>
			<label kind="synchronisation" x="93" y="323">action_completed!</label>
			<label kind="assignment" x="102" y="238">c = 0,
action = -1</label>
			<nail x="195" y="374"/>
			<nail x="195" y="195"/>
		</transition>
		<transition id="id43" controllable="false">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="255" y="263">move_south?</label>
			<label kind="assignment" x="255" y="280">move(current_step_length, 0),
c = 0,
action = 1 + (current_step_length * 10)</label>
		</transition>
		<transition id="id44" controllable="false">
			<source ref="id33"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="136" y="-42">move_north?</label>
			<label kind="assignment" x="136" y="-102">move(-current_step_length, 0),
c = 0,
action = 3 + (current_step_length * 10)</label>
		</transition>
		<transition id="id45" controllable="false">
			<source ref="id37"/>
			<target ref="id33"/>
			<label kind="guard" x="289" y="-111">c == 1</label>
			<label kind="synchronisation" x="289" y="-127">action_completed!</label>
			<label kind="assignment" x="289" y="-94">c = 0,
action = -1</label>
			<nail x="280" y="-153"/>
			<nail x="280" y="17"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
clock time;


// List one or more processes to be composed into a system.
system DroneController, MovingActions, TurningActions;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula>strategy opt = maxE(accum_reward - accum_penalty) [&lt;=21]{DroneController.DescisionState,yaw,x,y}-&gt;{time} : &lt;&gt; (DroneController.target || time &gt;= 20)</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=100;1] {action,accum_reward} : (DroneController.target || time &gt;= 10) under opt</formula>
			<comment/>
		</query>
	</queries>
</nta>
