<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// State
double x = 0.028513836;
double y = -8.822178;
double yaw = -1.57;
double avg_distance = 1.2586402156587237;
int current_step_length = 0;

double seen_x[96] = {0.028513836,0.9950617820000001,0.495061782,-0.004938218,0.8477874000000001,0.3477874000000001,-0.15221259999999992,-0.6522125999999999,-1.1522126,-1.6522126,-2.1522126,-2.179233,-2.0916226,-2.0916226,-2.0916226,-2.0916226,-2.0916226,-2.0916226,-1.0759138,0.075440966,-2.8015704599999998,-2.3015704599999998,-1.80157046,-1.30157046,-0.80157046,-0.30157046,0.19842954,-2.4124593,-1.9124593,-1.4124593,-0.9124593000000001,-0.4124593000000001,0.08754069999999992,0.5875406999999999,1.0875407,0.9722472,1.0363424,1.1622695,1.1622695,1.1622695,1.1622695,1.0334207,1.0334207,1.0334207,1.0334207,1.0334207,1.0334207,-1.8341793,-0.8487356,0.25075316,0.25075316,0.25075316,0.25075316,0.25075316,0.8339726599999999,0.33397266,-0.2406410000000001,-0.7406410000000001,-1.240641,-1.740641,-2.240641,-2.740641,-3.240641,-3.740641,-3.5769086,-3.6260054,-3.6260054,-3.6260054,-3.6260054,-3.6260054,-3.627103,-3.457346,-3.457346,-3.457346,-3.457346,-3.457346,-3.457346,-3.457346,-2.3875282,-1.4324958,-2.8964456,-2.3964456,-1.8964456,-1.3964456,-2.85620365,-2.35620365,-1.8562036499999999,-1.3562036499999999,-0.85620365,-0.35620365,-0.35261297,0.63752925,-0.21635535,0.93571052,0.43571052,-0.06428948};
double seen_y[96] = {-8.822178,-8.948045,-8.948045,-8.948045,-8.990031,-8.990031,-8.990031,-8.990031,-8.990031,-8.990031,-8.990031,-9.061306,-8.4982324,-7.9982324,-7.4982324,-6.9982324,-6.4982324,-5.9982324,-5.972926,-5.997516,-6.008924,-6.008924,-6.008924,-6.008924,-6.008924,-6.008924,-6.008924,-6.024592,-6.024592,-6.024592,-6.024592,-6.024592,-6.024592,-6.024592,-6.024592,-6.02849,-4.0466733,-5.688992,-5.188992,-4.688992,-4.188992,-5.7147458,-5.2147458,-4.7147458,-4.2147458,-3.7147458,-3.2147458,-3.1928186,-3.147074,-5.2572799,-4.7572799,-4.2572799,-3.7572799,-3.2572799,-3.2589285,-3.2589285,-3.236246,-3.236246,-3.236246,-3.236246,-3.236246,-3.236246,-3.236246,-3.236246,-3.257544,-2.14292863,-1.6429286300000001,-1.1429286300000001,-0.64292863,-0.14292863,-3.155892,-3.01940545,-2.51940545,-2.01940545,-1.51940545,-1.01940545,-0.51940545,-0.01940545,-0.08096243,0.118621975,0.020782437,0.020782437,0.020782437,0.020782437,0.07758973,0.07758973,0.07758973,0.07758973,0.07758973,0.07758973,0.091806196,0.029522922,0.048681054,0.032795284,0.032795284,0.032795284};
double seen_yaw[96] = {-1.57,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,3.14,0.0,0.0,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-1.57,-3.14,-3.14,-3.14,-3.14,-3.14,-3.14,-3.14,-3.14,-3.14,-3.14,-1.57,-1.57,-1.57,0.0,0.0,0.0};
double seen_distance[96] = {1.2586402156587237,1.843987516154336,2.343987516154336,2.843987516154336,1.6085103714421338,2.108510371442134,2.608510371442134,3.108510371442134,3.608510371442134,4.108510371442134,4.608510371442134,1.1961905353880944,1.6831805354662626,2.1831805354662626,2.6831805354662626,3.1831805354662626,3.6831805354662626,4.183180535466263,1.2586580239823821,1.3408445674128766,1.764368474185094,2.264368474185094,2.764368474185094,3.264368474185094,3.764368474185094,4.264368474185094,4.764368474185094,1.758755778490527,2.258755778490527,2.758755778490527,3.258755778490527,3.758755778490527,4.258755778490527,4.758755778490527,5.258755778490527,1.3888922951584017,1.277118164901441,1.8128766842697246,2.3128766842697246,2.8128766842697246,3.3128766842697246,1.542194579659177,2.042194579659177,2.542194579659177,3.042194579659177,3.542194579659177,4.042194579659177,1.2306661939292736,1.4043884447616093,1.856189757697424,2.356189757697424,2.856189757697424,3.356189757697424,3.856189757697424,1.9965120282015336,2.4965120282015336,1.8809038990728544,2.3809038990728544,2.8809038990728544,3.3809038990728544,3.8809038990728544,4.380903899072854,4.880903899072854,5.380903899072854,1.5000282192744958,1.9879126885208827,2.4879126885208827,2.9879126885208827,3.4879126885208827,3.9879126885208827,1.587982730047127,1.5891490495100484,2.0891490495100484,2.5891490495100484,3.0891490495100484,3.5891490495100484,4.089149049510048,4.589149049510048,0.9994576226206536,1.4559865387830329,1.8708488516351012,2.370848851635101,2.870848851635101,3.370848851635101,1.596606338053979,2.096606338053979,2.596606338053979,3.096606338053979,3.596606338053979,4.096606338053979,1.1222865450404613,1.0156573757659808,0.9044623471171745,1.5820855875598623,2.0820855875598623,2.5820855875598623};
int drone_state = 0;





// Actions, interger values in the interval [-1,6] corrosponds to an action
//    -1: No action
//
//     Moving: 
//          0: West,
//          1: South,
//          2: East,
//          3: North
//     Turning:
//          4: Turn left half a PI, 90 degrees
//          5: Turn right half a PI, 90 degrees
//          6: Rotate a full PI, 180 degrees &lt;- not used currently.
int action = -1;

// Goal
double goal_x = 0; 
double goal_y = -9.5;

// Utilitise
const double e = 0.5;
const double PI_upper = 3.14;
const double PI_lower = -3.14;
const double PI_half_pos = 1.57;
const double PI_half_neg = -1.57;

const double turning_cost = 1.5;

const double closest_safe_distance = 1.0;

const double half_PI_right = 1.57;   // 90 degrees right
const double half_PI_left = -1.57;   // 90 degrees left
const double full_PI_turn = 3.14;    // 180 degress turn

// Channels
broadcast chan action_completed;
broadcast chan move_north, move_south, move_east, move_west;
broadcast chan turn_90deg_left, turn_90deg_right, turn_180deg;

double distance_to_goal = 1;

bool has_been_in_partial_state(double x, double y) {
    int i = 0;
    for(i = 0; i &lt; 96; i++) {
        if((x - e &lt; seen_x[i] &amp;&amp; x + e &gt; seen_x[i]) &amp;&amp; (y - e &lt; seen_y[i] &amp;&amp; y + e &gt; seen_y[i]) ) {
            return true;
        }
    }

    return false;
}

double measured_distance() {
    int i = 0;
    int has_seen_this_state = 0;
    for(i = 0; i &lt; 96; i++) {
        if((x - e &lt; seen_x[i] &amp;&amp; x + e &gt; seen_x[i]) &amp;&amp; (y - e &lt; seen_y[i] &amp;&amp; y + e &gt; seen_y[i]) &amp;&amp; (yaw - e &lt; seen_yaw[i] &amp;&amp; yaw + e &gt; seen_yaw[i]) ) {
            return seen_distance[i];
        }
    }

    return 2.0;
}</declaration>
	<template>
		<name x="5" y="5">DroneController</name>
		<declaration>clock c;



bool check_distance(int step_length) {
    if(avg_distance - step_length &lt; closest_safe_distance) {
        return 0;
    }
    return 1;
}

bool check_goal() {
    if((x - e &lt; goal_x &amp;&amp; x + e &gt; goal_x) &amp;&amp; (y - e &lt; goal_y &amp;&amp; y + e &gt; goal_y)) {
        return 1;
    }

    return 0; 
}



//          0: West,
//          1: South,
//          2: East,
//          3: North
bool can_move(int action, int step_length) {

    if(action == 0) {
        if((yaw == PI_half_pos) &amp;&amp; check_distance(step_length) || has_been_in_partial_state(x, y + step_length)) {
            return true;
        }else {
            return false;
        }
    }else if(action == 1) {
        if((yaw == 0 &amp;&amp; check_distance(step_length)) || has_been_in_partial_state(x + step_length, y)) {
            return true;
        }else {
            return false;
        }
    }else if(action == 2) {
        if((yaw == PI_half_neg &amp;&amp; check_distance(step_length)) || has_been_in_partial_state(x, y - step_length)) {
            return true;
        }else {
            return false;
        }
    }else if(action == 3) {
        if(((yaw == PI_upper || yaw == PI_lower) &amp;&amp; check_distance(step_length)) || has_been_in_partial_state(x - step_length, y)) {
            return true;
        }else {
            return false;
        }
    }

    return false;
}</declaration>
		<location id="id0" x="892" y="238">
			<name x="833" y="263">DescisionState</name>
		</location>
		<location id="id1" x="1419" y="246">
		</location>
		<location id="id2" x="620" y="238">
		</location>
		<location id="id3" x="892" y="85">
		</location>
		<location id="id4" x="892" y="-51">
			<name x="875" y="-85">target</name>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="705" y="289">turn_180deg!</label>
			<nail x="867" y="306"/>
			<nail x="646" y="306"/>
		</transition>
		<transition id="id6">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="739" y="144">check_goal() == 0</label>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="901" y="-17">check_goal() == 1</label>
		</transition>
		<transition id="id8" controllable="false">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="1062" y="59">action_completed?</label>
			<nail x="1419" y="85"/>
		</transition>
		<transition id="id9" controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="671" y="68">action_completed?</label>
			<nail x="620" y="85"/>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="680" y="246">turn_90deg_right!</label>
			<nail x="833" y="263"/>
			<nail x="663" y="263"/>
		</transition>
		<transition id="id11">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="697" y="187">turn_90deg_left!</label>
			<nail x="841" y="204"/>
			<nail x="697" y="204"/>
		</transition>
		<transition id="id12">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="1054" y="374">step_length : int [1,5]</label>
			<label kind="guard" x="1062" y="391">can_move(0,step_length)</label>
			<label kind="synchronisation" x="1088" y="408">move_west!</label>
			<label kind="assignment" x="1012" y="425">current_step_length = step_length</label>
			<nail x="986" y="408"/>
			<nail x="1352" y="408"/>
		</transition>
		<transition id="id13">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="1028" y="289">step_length : int [1,5]</label>
			<label kind="guard" x="1054" y="306">can_move(2, step_length)</label>
			<label kind="synchronisation" x="1088" y="331">move_east!</label>
			<label kind="assignment" x="1011" y="348">current_step_length = step_length</label>
			<nail x="1011" y="331"/>
			<nail x="1249" y="331"/>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="1054" y="187">step_length : int [1,5]</label>
			<label kind="guard" x="1088" y="204">can_move(1, step_length)</label>
			<label kind="synchronisation" x="1088" y="221">move_south!</label>
			<label kind="assignment" x="994" y="238">current_step_length = step_length</label>
			<nail x="1079" y="221"/>
			<nail x="1198" y="221"/>
		</transition>
		<transition id="id15">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="1028" y="110">step_length : int [1,5]</label>
			<label kind="guard" x="1079" y="127">can_move(3, step_length)</label>
			<label kind="synchronisation" x="1088" y="144">move_north!</label>
			<label kind="assignment" x="1003" y="161">current_step_length = step_length</label>
			<nail x="986" y="144"/>
			<nail x="1343" y="144"/>
		</transition>
	</template>
	<template>
		<name>TurningActions</name>
		<declaration>clock c;

void turn_drone(double yaw_dx) {
    if(yaw &gt;=PI_upper &amp;&amp; yaw_dx &gt; 0) {
        yaw = PI_lower + yaw_dx;
    } else if (yaw &lt;= PI_lower &amp;&amp; yaw_dx &lt; 0) {
        yaw = PI_upper + yaw_dx;
    }else if(yaw + yaw_dx &gt; PI_upper) {
        if(yaw == PI_half_pos || yaw == PI_half_neg) {
            yaw = yaw * -1;
        }else {
            yaw = PI_lower + yaw_dx;
        }
    }else {
        yaw = yaw + yaw_dx;
    }

    avg_distance = measured_distance();
    distance_to_goal = distance_to_goal + sqrt((pow(goal_x - x,2)+pow(goal_y -y,2))) + turning_cost;
}</declaration>
		<location id="id16" x="-59" y="-136">
			<name x="-85" y="-119">waiting</name>
		</location>
		<location id="id17" x="-459" y="-136">
			<name x="-476" y="-178">LEFT</name>
			<label kind="invariant" x="-484" y="-110">c &lt;= 1</label>
		</location>
		<location id="id18" x="349" y="-136">
			<name x="324" y="-178">RIGHT</name>
			<label kind="invariant" x="324" y="-110">c &lt;= 1</label>
		</location>
		<location id="id19" x="-59" y="-425">
			<name x="-102" y="-459">TURN_180_DEG</name>
			<label kind="invariant" x="-85" y="-476">c &lt;= 1</label>
		</location>
		<init ref="id16"/>
		<transition id="id20" controllable="false">
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="25" y="-340">c == 1</label>
			<label kind="synchronisation" x="25" y="-323">action_completed!</label>
			<label kind="assignment" x="25" y="-306">c = 0,
action = -1</label>
			<nail x="17" y="-348"/>
			<nail x="17" y="-195"/>
		</transition>
		<transition id="id21" controllable="false">
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-161" y="-391">turn_180deg?</label>
			<label kind="assignment" x="-161" y="-365">c = 0,
action = 6,
turn_drone(PI_upper)</label>
		</transition>
		<transition id="id22" controllable="false">
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="60" y="-85">c == 1</label>
			<label kind="synchronisation" x="59" y="-25">action_completed!</label>
			<label kind="assignment" x="59" y="-68">c = 0,
action = -1</label>
			<nail x="264" y="-93"/>
			<nail x="26" y="-93"/>
		</transition>
		<transition id="id23" controllable="false">
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-314" y="-221">c == 1</label>
			<label kind="synchronisation" x="-314" y="-272">action_completed!</label>
			<label kind="assignment" x="-314" y="-255">c = 0,
action = -1</label>
			<nail x="-357" y="-195"/>
			<nail x="-145" y="-195"/>
		</transition>
		<transition id="id24" controllable="false">
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="76" y="-161">turn_90deg_right?</label>
			<label kind="assignment" x="76" y="-221">c = 0,
action = 5,
turn_drone(half_PI_right)</label>
		</transition>
		<transition id="id25" controllable="false" color="#a9a9a9">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-348" y="-135">turn_90deg_left?</label>
			<label kind="assignment" x="-348" y="-110">c = 0,
action = 4,
turn_drone(half_PI_left)</label>
		</transition>
	</template>
	<template>
		<name>MovingActions</name>
		<declaration>
clock c;

void move(double dir_x, double dir_y) {
    x = x + dir_x;
    y = y + dir_y;
    avg_distance = measured_distance();
    distance_to_goal = distance_to_goal + sqrt((pow(goal_x - x,2)+pow(goal_y -y,2)));
}</declaration>
		<location id="id26" x="238" y="110">
			<name x="228" y="76">waiting</name>
		</location>
		<location id="id27" x="238" y="459">
			<name x="221" y="476">SOUTH</name>
			<label kind="invariant" x="263" y="450">c &lt;= 1</label>
		</location>
		<location id="id28" x="-162" y="110">
			<name x="-179" y="68">WEST</name>
			<label kind="invariant" x="-187" y="136">c &lt;= 1</label>
		</location>
		<location id="id29" x="646" y="110">
			<name x="621" y="68">EAST</name>
			<label kind="invariant" x="621" y="136">c &lt;= 1</label>
		</location>
		<location id="id30" x="238" y="-238">
			<name x="221" y="-272">NORTH</name>
			<label kind="invariant" x="264" y="-246">c &lt;= 1</label>
		</location>
		<init ref="id26"/>
		<transition id="id31" controllable="false">
			<source ref="id29"/>
			<target ref="id26"/>
			<label kind="guard" x="357" y="161">c == 1</label>
			<label kind="synchronisation" x="358" y="216">action_completed!</label>
			<label kind="assignment" x="357" y="178">c = 0,
action = -1</label>
			<nail x="561" y="153"/>
			<nail x="323" y="153"/>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id28"/>
			<target ref="id26"/>
			<label kind="guard" x="0" y="25">c == 1</label>
			<label kind="synchronisation" x="-17" y="-25">action_completed!</label>
			<label kind="assignment" x="0" y="-9">c = 0,
action = -1</label>
			<nail x="-60" y="51"/>
			<nail x="152" y="51"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id26"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="416" y="76">move_east?</label>
			<label kind="assignment" x="416" y="17">move(0, -current_step_length),
c = 0,
action = 2</label>
		</transition>
		<transition id="id34" controllable="false" color="#a9a9a9">
			<source ref="id26"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-51" y="85">move_west?</label>
			<label kind="assignment" x="-51" y="119">move(0, current_step_length),
c = 0,
action = 0</label>
		</transition>
		<transition id="id35" controllable="false">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="guard" x="136" y="289">c == 1</label>
			<label kind="synchronisation" x="93" y="323">action_completed!</label>
			<label kind="assignment" x="102" y="238">c = 0,
action = -1</label>
			<nail x="195" y="374"/>
			<nail x="195" y="195"/>
		</transition>
		<transition id="id36" controllable="false">
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="255" y="263">move_south?</label>
			<label kind="assignment" x="255" y="280">move(current_step_length, 0),
c = 0,
action = 1</label>
		</transition>
		<transition id="id37" controllable="false">
			<source ref="id26"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="136" y="-42">move_north?</label>
			<label kind="assignment" x="136" y="-102">move(-current_step_length, 0),
c = 0,
action = 3</label>
		</transition>
		<transition id="id38" controllable="false">
			<source ref="id30"/>
			<target ref="id26"/>
			<label kind="guard" x="289" y="-111">c == 1</label>
			<label kind="synchronisation" x="289" y="-127">action_completed!</label>
			<label kind="assignment" x="289" y="-94">c = 0,
action = -1</label>
			<nail x="280" y="-153"/>
			<nail x="280" y="17"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
clock time;


// List one or more processes to be composed into a system.
system DroneController, MovingActions, TurningActions;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula/>
			<comment>// Learn startegy that minimize time to target</comment>
		</query>
		<query>
			<formula>strategy FastSafe = minE(distance_to_goal) [&lt;=1000]  {DroneController.DescisionState} -&gt; {x,y,yaw}  : &lt;&gt; (DroneController.target || time &gt;= 4)</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1000;1]{x,y}: DroneController.target under FastSafe</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.025 (95% CI)" timestamp="2024-02-19 10:25:32 +0100">
				<option key="--diagnostic" value="-1"/>
				<details>≥ 0.025 (95% CI)</details>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="x" type="l" color="0xff0000" encoding="csv">0.0,0.0
9.0,0.0
9.0,1.0
10.0,1.0
10.0,2.0
11.0,2.0
11.0,3.0
12.0,3.0
12.0,4.0
13.0,4.0
13.0,5.0
14.0,5.0
14.0,6.0
15.0,6.0
					</series>
					<series title="y" type="l" color="0x00ffff" encoding="csv">0.0,0.0
0.0,1.0
1.0,1.0
1.0,2.0
2.0,2.0
2.0,3.0
3.0,3.0
3.0,4.0
4.0,4.0
4.0,5.0
5.0,5.0
5.0,6.0
6.0,6.0
6.0,7.0
7.0,7.0
7.0,8.0
15.0,8.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>saveStrategy("/home/sw9-bois/UPPAAL-TO-ROS-SIMULATION/uppaal_models/fast.json", FastSafe)</formula>
			<comment/>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2024-01-11 15:18:50 +0100">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>// Can TurningActions and MovingActions be out of the waiting state at the same time?</comment>
		</query>
		<query>
			<formula>A[] !TurningActions.waiting &amp;&amp; !MovingActions.waiting</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-02-15 12:46:34 +0100">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>strategy FastSafeOLD = minE(time) [&lt;=1000]  {x,y} -&gt; {}  : &lt;&gt; DroneController.target</formula>
			<comment/>
		</query>
	</queries>
</nta>
