<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// State
double x = -2.1217995;
double y = -0.89823127;
double yaw = -1.57;
double avg_distance = 2.0;

double seen_x[11] = {-0.22422776,-0.285051,-0.24830078,0.8810262,0.8884799,0.9214759,-0.049483676,-1.1946532,-2.2855697,-2.1785505,-2.1217995};
double seen_y[11] = {-0.098224856,-0.20932405,-0.08650434,-0.05284871,-0.058292665,-0.024385082,-0.046937615,-0.0020205134,-0.04534943,-0.03096442,-0.89823127};
double seen_yaw[11] = {0.0,-1.57,0.0,0.0,-1.57,-3.14,-3.14,-3.14,-3.14,-1.57,-1.57};
double seen_distance[11] = {2.6088790328264237,1.0353973153352738,2.0,1.7118044908881187,1.0133817128658296,5.060938245058059,4.725125955152512,2.0,2.7278586740255357,2.0,2.0};
int drone_state = 0;





// Actions, interger values in the interval [-1,6] corrosponds to an action
//    -1: No action
//
//     Moving: 
//          0: West,
//          1: South,
//          2: East,
//          3: North
//     Turning:
//          4: Turn left half a PI, 90 degrees
//          5: Turn right half a PI, 90 degrees
//          6: Rotate a full PI, 180 degrees &lt;- not used currently.
int action = -1;

// Goal
double goal_x = 0; 
double goal_y = -9.5;

// Utilitise
const double e = 0.5;
const double PI_upper = 3.14;
const double PI_lower = -3.14;
const double PI_half_pos = 1.57;
const double PI_half_neg = -1.57;

const double step_length = 1.0;
const double closest_safe_distance = 1.0;

const double half_PI_right = 1.57;   // 90 degrees right
const double half_PI_left = -1.57;   // 90 degrees left
const double full_PI_turn = 3.14;    // 180 degress turn

// Channels
broadcast chan action_completed;
broadcast chan move_north, move_south, move_east, move_west;
broadcast chan turn_90deg_left, turn_90deg_right, turn_180deg;



double measured_distance() {
    int i = 0;
    int has_seen_this_state = 0;
    for(i = 0; i &lt; 11; i++) {
        if((x - e &lt; seen_x[i] &amp;&amp; x + e &gt; seen_x[i]) &amp;&amp; (y - e &lt; seen_y[i] &amp;&amp; y + e &gt; seen_y[i]) &amp;&amp; (yaw - e &lt; seen_yaw[i] &amp;&amp; yaw + e &gt; seen_yaw[i]) ) {
            return seen_distance[i];
        }
    }

    return 2.0;
}</declaration>
	<template>
		<name x="5" y="5">DroneController</name>
		<declaration>clock c;



bool check_distance() {
    if(avg_distance - step_length &lt; closest_safe_distance) {
        return 0;
    }
    return 1;
}

bool check_goal() {
    if((x - e &lt; goal_x &amp;&amp; x + e &gt; goal_x) &amp;&amp; (y - e &lt; goal_y &amp;&amp; y + e &gt; goal_y)) {
        return 1;
    }

    return 0; 
}</declaration>
		<location id="id0" x="892" y="238">
		</location>
		<location id="id1" x="1198" y="238">
		</location>
		<location id="id2" x="620" y="238">
		</location>
		<location id="id3" x="892" y="85">
		</location>
		<location id="id4" x="892" y="-51">
			<name x="875" y="-85">target</name>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="892" y="127">check_goal() == 0</label>
		</transition>
		<transition id="id6">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="901" y="-17">check_goal() == 1</label>
		</transition>
		<transition id="id7" controllable="false">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="994" y="68">action_completed?</label>
			<nail x="1198" y="85"/>
		</transition>
		<transition id="id8" controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="671" y="68">action_completed?</label>
			<nail x="620" y="85"/>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="680" y="246">turn_90deg_right!</label>
			<nail x="833" y="263"/>
			<nail x="663" y="263"/>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="697" y="187">turn_90deg_left!</label>
			<nail x="841" y="204"/>
			<nail x="697" y="204"/>
		</transition>
		<transition id="id11">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="943" y="323">yaw == PI_half_pos &amp;&amp; check_distance()</label>
			<label kind="synchronisation" x="1012" y="280">move_west!</label>
			<nail x="978" y="297"/>
			<nail x="1122" y="297"/>
		</transition>
		<transition id="id12">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="977" y="229">yaw == PI_half_neg &amp;&amp; check_distance()</label>
			<label kind="synchronisation" x="1003" y="246">move_east!</label>
			<nail x="986" y="263"/>
			<nail x="1122" y="263"/>
		</transition>
		<transition id="id13">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="969" y="204">yaw == 0 &amp;&amp; check_distance()</label>
			<label kind="synchronisation" x="1003" y="212">move_south!</label>
			<nail x="994" y="229"/>
			<nail x="1113" y="229"/>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="960" y="170">(yaw == PI_upper || yaw == PI_lower) &amp;&amp; check_distance()</label>
			<label kind="synchronisation" x="1004" y="187">move_north!</label>
			<nail x="986" y="204"/>
			<nail x="1122" y="204"/>
		</transition>
	</template>
	<template>
		<name>TurningActions</name>
		<declaration>clock c;

void turn_drone(double yaw_dx) {
    if(yaw &gt;=PI_upper &amp;&amp; yaw_dx &gt; 0) {
        yaw = PI_lower;
    } else if (yaw &lt;= PI_lower &amp;&amp; yaw_dx &lt; 0) {
        yaw = PI_upper;
    }
    yaw = yaw + yaw_dx;
    avg_distance = measured_distance();
}</declaration>
		<location id="id15" x="-59" y="-136">
			<name x="-69" y="-170">waiting</name>
		</location>
		<location id="id16" x="-459" y="-136">
			<name x="-476" y="-178">LEFT</name>
			<label kind="invariant" x="-484" y="-110">c &lt;= 1</label>
		</location>
		<location id="id17" x="349" y="-136">
			<name x="324" y="-178">RIGHT</name>
			<label kind="invariant" x="324" y="-110">c &lt;= 1</label>
		</location>
		<init ref="id15"/>
		<transition id="id18" controllable="false">
			<source ref="id17"/>
			<target ref="id15"/>
			<label kind="guard" x="60" y="-85">c == 1</label>
			<label kind="synchronisation" x="59" y="-25">action_completed!</label>
			<label kind="assignment" x="59" y="-68">c = 0,
action = -1</label>
			<nail x="264" y="-93"/>
			<nail x="26" y="-93"/>
		</transition>
		<transition id="id19" controllable="false">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-314" y="-221">c == 1</label>
			<label kind="synchronisation" x="-314" y="-272">action_completed!</label>
			<label kind="assignment" x="-314" y="-255">c = 0,
action = -1</label>
			<nail x="-357" y="-195"/>
			<nail x="-145" y="-195"/>
		</transition>
		<transition id="id20" controllable="false">
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="76" y="-161">turn_90deg_right?</label>
			<label kind="assignment" x="76" y="-221">c = 0,
action = 5,
turn_drone(half_PI_right)</label>
		</transition>
		<transition id="id21" controllable="false" color="#a9a9a9">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-348" y="-135">turn_90deg_left?</label>
			<label kind="assignment" x="-348" y="-110">c = 0,
action = 4,
turn_drone(half_PI_left)</label>
		</transition>
	</template>
	<template>
		<name>MovingActions</name>
		<declaration>
clock c;

void move(double dir_x, double dir_y) {
    x = x + dir_x;
    y = y + dir_y;
    avg_distance = measured_distance();
}</declaration>
		<location id="id22" x="238" y="110">
			<name x="228" y="76">waiting</name>
		</location>
		<location id="id23" x="238" y="459">
			<name x="221" y="476">SOUTH</name>
			<label kind="invariant" x="263" y="450">c &lt;= 1</label>
		</location>
		<location id="id24" x="-162" y="110">
			<name x="-179" y="68">WEST</name>
			<label kind="invariant" x="-187" y="136">c &lt;= 1</label>
		</location>
		<location id="id25" x="646" y="110">
			<name x="621" y="68">EAST</name>
			<label kind="invariant" x="621" y="136">c &lt;= 1</label>
		</location>
		<location id="id26" x="238" y="-238">
			<name x="221" y="-272">NORTH</name>
			<label kind="invariant" x="264" y="-246">c &lt;= 1</label>
		</location>
		<init ref="id22"/>
		<transition id="id27" controllable="false">
			<source ref="id25"/>
			<target ref="id22"/>
			<label kind="guard" x="357" y="161">c == 1</label>
			<label kind="synchronisation" x="358" y="216">action_completed!</label>
			<label kind="assignment" x="357" y="178">c = 0,
action = -1</label>
			<nail x="561" y="153"/>
			<nail x="323" y="153"/>
		</transition>
		<transition id="id28" controllable="false">
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="guard" x="0" y="25">c == 1</label>
			<label kind="synchronisation" x="-17" y="-25">action_completed!</label>
			<label kind="assignment" x="0" y="-9">c = 0,
action = -1</label>
			<nail x="-60" y="51"/>
			<nail x="152" y="51"/>
		</transition>
		<transition id="id29" controllable="false">
			<source ref="id22"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="416" y="76">move_east?</label>
			<label kind="assignment" x="416" y="17">move(0, -step_length),
c = 0,
action = 2</label>
		</transition>
		<transition id="id30" controllable="false" color="#a9a9a9">
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-51" y="85">move_west?</label>
			<label kind="assignment" x="-51" y="119">move(0, step_length),
c = 0,
action = 0</label>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="136" y="289">c == 1</label>
			<label kind="synchronisation" x="93" y="323">action_completed!</label>
			<label kind="assignment" x="102" y="238">c = 0,
action = -1</label>
			<nail x="195" y="374"/>
			<nail x="195" y="195"/>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="255" y="263">move_south?</label>
			<label kind="assignment" x="255" y="280">move(step_length, 0),
c = 0,
action = 1</label>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id22"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="136" y="-42">move_north?</label>
			<label kind="assignment" x="136" y="-102">move(-step_length, 0),
c = 0,
action = 3</label>
		</transition>
		<transition id="id34" controllable="false">
			<source ref="id26"/>
			<target ref="id22"/>
			<label kind="guard" x="289" y="-111">c == 1</label>
			<label kind="synchronisation" x="289" y="-127">action_completed!</label>
			<label kind="assignment" x="289" y="-94">c = 0,
action = -1</label>
			<nail x="280" y="-153"/>
			<nail x="280" y="17"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
clock time;


// List one or more processes to be composed into a system.
system DroneController, MovingActions, TurningActions;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula/>
			<comment>// Learn startegy that minimize time to target</comment>
		</query>
		<query>
			<formula>strategy FastSafe = minE(time) [&lt;=1000]  {x,y} -&gt; {}  : &lt;&gt; DroneController.target</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1000;1]{x,y}: DroneController.target under FastSafe</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.025 (95% CI)" timestamp="2024-02-19 10:25:32 +0100">
				<option key="--diagnostic" value="-1"/>
				<details>≥ 0.025 (95% CI)</details>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="x" type="l" color="0xff0000" encoding="csv">0.0,0.0
9.0,0.0
9.0,1.0
10.0,1.0
10.0,2.0
11.0,2.0
11.0,3.0
12.0,3.0
12.0,4.0
13.0,4.0
13.0,5.0
14.0,5.0
14.0,6.0
15.0,6.0
					</series>
					<series title="y" type="l" color="0x00ffff" encoding="csv">0.0,0.0
0.0,1.0
1.0,1.0
1.0,2.0
2.0,2.0
2.0,3.0
3.0,3.0
3.0,4.0
4.0,4.0
4.0,5.0
5.0,5.0
5.0,6.0
6.0,6.0
6.0,7.0
7.0,7.0
7.0,8.0
15.0,8.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>saveStrategy("/home/sw9-bois/UPPAAL-TO-ROS-SIMULATION/uppaal_models/fast.json", FastSafe)</formula>
			<comment/>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2024-01-11 15:18:50 +0100">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>// Can TurningActions and MovingActions be out of the waiting state at the same time?</comment>
		</query>
		<query>
			<formula>A[] !TurningActions.waiting &amp;&amp; !MovingActions.waiting</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-02-15 12:46:34 +0100">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
