<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// State
int x = //TAG_x;
int y = //TAG_y;
double yaw = //TAG_yaw;
const int map_width = //TAG_width_map;
const int map_height = //TAG_height_map;
const int max_size = map_height * map_width;
//TAG_map;

int current_step_length = 1;

// Actions, interger values in the interval [-1,6] corrosponds to an action
//    -1: No action
//
//     Moving: 
//          0: West,
//          1: South,
//          2: East,
//          3: North
//     Turning:
//          4: Turn left half a PI, 90 degrees
//          5: Turn right half a PI, 90 degrees
//          6: Rotate a full PI, 180 degrees &lt;- not used currently.
int action = -1;

// Utilitise
const double e = 0.5;
const double e_yaw = 0.2;
const double PI_upper = 3.14;
const double PI_lower = -3.14;
const double PI_half_pos = 1.57;
const double PI_half_neg = -1.57;
const double map_granularity = //TAG_granularity_map;

// Drone specs, all values in meters
const double drone_diameter = //TAG_drone_diameter;
const double safety_range = //TAG_safety_range;
const int laser_range = //TAG_range_laser;
const int laser_range_diameter = //TAG_laser_range_diameter;



const double closest_safe_distance = 1.0;

const double half_PI_right = 1.57;   // 90 degrees right
const double half_PI_left = -1.57;   // 90 degrees left
const double full_PI_turn = 3.14;    // 180 degress turn

// Rewards / training
//          0: West / yaw = -1.57 (+y),
//          1: South / yaw = 0 (+x)
//          2: East / yaw = 1.57 (-y),
//          3: North / yaw = 3.14 or -3.14 (-x)

const double discovery_reward = //TAG_discovery_reward;
const double turning_cost = //TAG_turning_cost;
const double moving_cost = //TAG_moving_cost;
const double pump_exploration_reward = //TAG_pump_exploration_reward;
const bool open = //TAG_open;

double accum_reward = 0;

const double upper_range_pump_detection = 1.5;
const double lower_range_pump_detection = 0.55;


int closest_col = 0;
int closest_row = 0;
int closest_action = 0;

int allowed_action = 0;
int action_seq_question[100];
int action_seq_poi[100];

double yaw_to_check;

// Channels
broadcast chan action_completed;
broadcast chan move_north, move_south, move_east, move_west;
broadcast chan turn_90deg_left, turn_90deg_right, turn_180deg;




double turn_drone_two(double yaw, double yaw_dx) {
    if(yaw &gt;=PI_upper &amp;&amp; yaw_dx &gt; 0) {
        return PI_lower + yaw_dx;
    } else if (yaw &lt;= PI_lower &amp;&amp; yaw_dx &lt; 0) {
        return PI_upper + yaw_dx;
    }else if(yaw + yaw_dx &gt; PI_upper) {
        if(yaw == PI_half_pos || yaw == PI_half_neg) {
            return yaw * -1;
        }else {
            return PI_lower + yaw_dx;
        }
    }else {
        return yaw + yaw_dx;
    }
}</declaration>
	<template>
		<name x="5" y="5">DroneController</name>
		<declaration>clock c;
double dist = 999.9;







bool can_see_pump(double yaw, int x, int y) {
    int cells_updated = 0; // The number of cells that have been discovered / changed from unknown
    int N_forward_cells_to_update = fint(laser_range / map_granularity); // Gives us the number of drones to check in front of the drone
    int N_diameter_cells_to_update = fint(laser_range_diameter / map_granularity); // Gives us the number of cells to update in to the left and right of the drone
    int upper_range_pump_detection_cells = fint(upper_range_pump_detection / map_granularity);
    int lower_range_pump_detection_cells = fint(lower_range_pump_detection / map_granularity);

    if(N_forward_cells_to_update % 2 == 0) {
        N_forward_cells_to_update += 1;
    }

    if(N_diameter_cells_to_update % 2 == 0) {
        N_diameter_cells_to_update += 1;
    }

    if(PI_half_neg - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_half_neg + e_yaw) { // exploring in positive y direction
        int lower_bound_x = x - (N_diameter_cells_to_update / 2);
        int upper_bound_x = x + (N_diameter_cells_to_update / 2);
        int upper_bound_y = y + N_forward_cells_to_update;

        int i;
        int j;

        if(lower_bound_x &lt; 0) {
            lower_bound_x = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_x &gt; map_width){
            upper_bound_x = map_width; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_y &gt; map_height){
            upper_bound_y = map_height; // if we are reaching a point where the range of the drone would go outside the map in the posivtive direction, we set the upper bound for y to map height
        }

        for(i = lower_bound_x; i &lt; upper_bound_x; i++) {
            for(j = y + 1; j &lt; upper_bound_y; j++) {
                  if(map[j][i] == 2) {
                    if(abs(j - y) &lt;= upper_range_pump_detection_cells) {
                        
                        map[j][i] = 3;
                        return true;
                    }
                }
               
            }
        }
    }else if(0 - e_yaw &lt; yaw &amp;&amp; yaw &lt; 0 + e_yaw) { // exploring in positive x direction
        int lower_bound_y = y - (N_diameter_cells_to_update / 2);
        int upper_bound_y = y +  (N_diameter_cells_to_update / 2);
        int upper_bound_x = x + N_forward_cells_to_update;

        int i;
        int j;

        if(lower_bound_y &lt; 0) {
            lower_bound_y = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_y &gt; map_height){
            upper_bound_y = map_height; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_x &gt; map_width){
            upper_bound_x = map_width; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }

        for(j = lower_bound_y; j &lt; upper_bound_y; j++) {
            for(i = x + 1; i &lt; upper_bound_x; i++) {
       
                if(map[j][i] == 2) {
                    if(abs(i - x) &lt;= upper_range_pump_detection_cells) {
                        map[j][i] = 3;
                        return true;
                    }
                }
           
            }
        }
    }else if(PI_half_pos - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_half_pos + e_yaw) { // exploring in negative y direction
        int lower_bound_x = x - (N_diameter_cells_to_update / 2);
        int upper_bound_x = x + (N_diameter_cells_to_update / 2);
        int upper_bound_y = y - N_forward_cells_to_update;

        int i;
        int j;

        if(lower_bound_x &lt; 0) {
            lower_bound_x = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_x &gt; map_width){
            upper_bound_x = map_width; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_y &lt; 0){
            upper_bound_y = 0; // if we are reaching a point where the range of the drone would go outside the map in the negative direction, we set the upper bound for y to 0
        }

        for(i = lower_bound_x; i &lt; upper_bound_x; i++) {
            for(j = y - 1; j &gt;= upper_bound_y; j--) {
                
                if(map[j][i] == 2) {
                    if(abs(j - y) &lt;= upper_range_pump_detection_cells) {
                        map[j][i] = 3;
                        return true;
                    }
                }
              
            }
        }
    }else if((PI_lower - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_lower + e_yaw) || (PI_upper - e_yaw &lt; yaw &amp;&amp; yaw &lt; PI_upper + e_yaw)) { // exploring in negative x direction
        int lower_bound_y = y - (N_diameter_cells_to_update / 2);
        int upper_bound_y = y +  (N_diameter_cells_to_update / 2);
        int upper_bound_x = x - N_forward_cells_to_update;

        int i;
        int j;

        if(lower_bound_y &lt; 0) {
            lower_bound_y = 0; // if we reach a point where the cells would go outside of the map in the negative direction, we set the lower bound to 0
        }
        if(upper_bound_y &gt; map_height){
            upper_bound_y = map_height; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }
        if(upper_bound_x &lt; 0){
            upper_bound_x = 0; // if we reach a point where the cells would go outside of the map in the positive direction, we set the upper bound to the width of the map
        }

        for(j = lower_bound_y; j &lt; upper_bound_y; j++) {
            for(i = x - 1; i &gt;= upper_bound_x; i--) {
               if(map[j][i] == 2) {
                    if(abs(i - x) &lt;= upper_range_pump_detection_cells) {
                        map[j][i] = 3;
                        return true;
                    }
                }

            }
        }
    }
    return false;
}


//          0: West (+y),
//          1: South (+x)
//          2: East (-y),
//          3: North (-x)bool can_move(int action, double step_length, int x, int y) {
bool can_move(int action, double step_length, int x, int y) {
    int N_cells_in_dir = fint((step_length / 2) / map_granularity);
    int drone_cells_to_cover = fint((drone_diameter) / map_granularity);
    int safety_range_cells = fint(safety_range / map_granularity);

    if(drone_cells_to_cover % 2 == 0) {
        drone_cells_to_cover += 1;
    }

    if(action == 0) {
        int lower_bound_x = x - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_x = x +  (drone_cells_to_cover / 2) + safety_range_cells;
        int upper_bound_y = y + N_cells_in_dir + safety_range_cells;

        int i;
        int j;

        if(lower_bound_x &lt; 0 || upper_bound_x &gt; map_width || upper_bound_y &gt; map_height) {
            return false;
        }
        for(i = lower_bound_x; i &lt; upper_bound_x; i++) {
            for(j = y + (drone_cells_to_cover / 2); j &lt; upper_bound_y; j++) {
                if( map[j][i] == 100) {
                    return false;
                }
            }
        }
        return true;
    }else if(action == 1) {
        int lower_bound_y = y - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_y = y +  (drone_cells_to_cover / 2) + safety_range_cells;
        int upper_bound_x = x + N_cells_in_dir + safety_range_cells;

        int i;
        int j;

         if(lower_bound_y &lt; 0 || upper_bound_y &gt; map_height || upper_bound_x &gt; map_width) {
            return false;
        }
        for(i = x + (drone_cells_to_cover / 2); i &lt; upper_bound_x; i++) {
            for(j = lower_bound_y; j &lt; upper_bound_y; j++) {
                if(map[j][i] == 100) {
                    return false;
                }
            }
        }
        return true;
    }else if(action == 2) {
        int lower_bound_x = x - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_x = x +  (drone_cells_to_cover / 2) + safety_range_cells;
        int lower_bound_y = y - N_cells_in_dir - safety_range_cells;

        int i;
        int j;

        if(lower_bound_x &lt; 0 || upper_bound_x &gt; map_width || lower_bound_y &lt; 0) {
            return false;
        }
        for(i = lower_bound_x; i &lt; upper_bound_x; i++) {
            for(j = y - (drone_cells_to_cover / 2); j &gt;= lower_bound_y; j--) {
                if(map[j][i] == 100) {
                    return false;
                }
            }
        }
        return true;
    }else if(action == 3) {
        int lower_bound_y = y - (drone_cells_to_cover / 2) - safety_range_cells;
        int upper_bound_y = y +  (drone_cells_to_cover / 2) + safety_range_cells;
        int lower_bound_x = x - N_cells_in_dir - safety_range_cells;

        int i;
        int j;

       if(lower_bound_y &lt; 0 ||upper_bound_y &gt; map_height || lower_bound_x &lt; 0) {
            return false;
        }
        for(i = x - (drone_cells_to_cover / 2); i &gt;= lower_bound_x; i--) {
            for(j = lower_bound_y; j &lt; upper_bound_y; j++) {
                if(map[j][i] == 100) {
                    return false;
                }
            }
        }
        return true;
    }
    return false;
}

void revereseArray(int&amp; arr[100], int start, int end) 
{ 
    int temp; 
    while (start &lt; end) { 
        temp = arr[start]; 
        arr[start] = arr[end]; 
        arr[end] = temp; 
        start++; 
        end--; 
    }
} 
  
int is_valid(int row, int col, int rows, int cols) {

    if(row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; col &gt;= 0 &amp;&amp; col &lt; cols) {
        return 1;
    }else {
        return 0;
    }
}

void set_closest_unkown_cell() {
    int prev[max_size];
    int queue[max_size][4];
    int visited[map_height][map_width];
    int actions_question[100];
    int actions_poi[100];
    int directions[4][2] = {{10, 0}, {0, 10}, {-10, 0}, {0, -10}};

    int front = 0;
    int rear = 0;
    int h;

    bool found_question = false;

  
    int o;


    yaw_to_check = yaw;
    for(o = 0; o &lt; 100; o++) {
        actions_question[o] = -1;
        actions_poi[o] = -1;
    }

    

    queue[rear][0] = y;
    queue[rear][1] = x;
    queue[rear][2] = -1;
    queue[rear][3] = 0;
    rear = rear + 1;
    visited[y][x] = 1;
    prev[rear] = -1;
    
    while(front != rear) {
        int row = queue[front][0];
        int col = queue[front][1];
        int dir = queue[front][2];
        int depth = queue[front][3];
        int i;
        if(depth == 20) {
            return; 
        }
        front = (front + 1) % max_size;
       
        if(map[row][col] == -1 &amp;&amp; found_question == false) {    
            int i = 0;
            closest_col = col;
            closest_row = row;
    
            while(dir != -1 &amp;&amp; i != 99) {
                int prev_index = prev[front];               
                actions_question[i] = dir;
                i++;
                row = queue[prev_index][0];
                col = queue[prev_index][1];
                dir = queue[prev_index][2];
                front = prev_index;
            }
            revereseArray(actions_question,0,99);
            action_seq_question = actions_question;
            found_question = true;
           
        }
        

       for(h = 0; h &lt; 4; h++) {
        if(can_see_pump(yaw_to_check, col, row)) {    
            int i = 0;
            closest_col = col;
            closest_row = row;
    
            while(dir != -1 &amp;&amp; i != 99) {
                int prev_index = prev[front];               
                actions_poi[i] = dir;
                i++;
                row = queue[prev_index][0];
                col = queue[prev_index][1];
                dir = queue[prev_index][2];
                front = prev_index;
            }
            revereseArray(actions_poi,0,99);
            action_seq_poi = actions_poi;
            
            return;
           
        }else {
            yaw_to_check = turn_drone_two(yaw_to_check, PI_half_pos);
        }
       }

      yaw_to_check = yaw;
       
           

        for(i = 0; i &lt; 4; i++) {
            int newRow = row + directions[i][0];
            int newCol = col + directions[i][1];
        
            if(is_valid(newRow, newCol, map_height,map_width) &amp;&amp; visited[newRow][newCol] != 1 &amp;&amp; can_move(i,1.0, col,row) == true) {
                visited[newRow][newCol] = 1;
                queue[rear][0] = newRow;
                queue[rear][1] = newCol;
                queue[rear][2] = i;
                queue[rear][3] = depth + 1;
                prev[rear] = front - 1;
                rear = (rear + 1) % max_size;
            }
        } 
    }

    closest_col = -1;
    closest_row = -1;
    action_seq_poi = actions_poi; 
    action_seq_question = actions_question;       
}


int get_best_action() {
  
  int i;
  int found_moving_action = 0;
  int act = -1;
  set_closest_unkown_cell();
  
  
  if(yaw != yaw_to_check) {
    return 4;
  }
      
  for(i = 0; i &lt; 100; i++) {
    if(action_seq_poi[i] != -1) {
        return action_seq_poi[i];
    }
  }  

  for(i = 0; i &lt; 100; i++) {
    if(action_seq_question[i] != -1) {
        return action_seq_question[i];
    }
  }  



  return 4;

}</declaration>
		<location id="id0" x="892" y="136">
			<name x="833" y="153">DescisionState</name>
		</location>
		<location id="id1" x="1419" y="246">
		</location>
		<location id="id2" x="620" y="238">
		</location>
		<location id="id3" x="892" y="85">
		</location>
		<location id="id4" x="892" y="-51">
			<name x="875" y="-85">target</name>
		</location>
		<location id="id5" x="1207" y="263">
			<name x="1232" y="221">south</name>
			<committed/>
		</location>
		<location id="id6" x="1215" y="136">
			<name x="1181" y="102">north</name>
			<committed/>
		</location>
		<location id="id7" x="1139" y="331">
			<name x="1122" y="297">east</name>
			<committed/>
		</location>
		<location id="id8" x="1139" y="408">
			<name x="1122" y="374">west</name>
			<committed/>
		</location>
		<location id="id9" x="901" y="246">
			<name x="799" y="187">get_action</name>
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id10" controllable="false">
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="926" y="408">allowed_action == 0</label>
			<nail x="901" y="408"/>
		</transition>
		<transition id="id11" controllable="false">
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="933" y="315">allowed_action == 2</label>
		</transition>
		<transition id="id12" controllable="false">
			<source ref="id9"/>
			<target ref="id5"/>
			<label kind="guard" x="1010" y="213">allowed_action == 1</label>
		</transition>
		<transition id="id13" controllable="false">
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="1020" y="127">allowed_action == 3</label>
		</transition>
		<transition id="id14" controllable="false">
			<source ref="id9"/>
			<target ref="id2"/>
			<label kind="guard" x="740" y="182">allowed_action == 4</label>
			<label kind="synchronisation" x="671" y="161">turn_90deg_left!</label>
			<nail x="722" y="187"/>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id9"/>
			<target ref="id2"/>
			<label kind="guard" x="638" y="208">allowed_action == 5</label>
			<label kind="synchronisation" x="688" y="255">turn_90deg_right!</label>
		</transition>
		<transition id="id16">
			<source ref="id0"/>
			<target ref="id9"/>
			<label kind="assignment" x="782" y="178">allowed_action = get_best_action()</label>
		</transition>
		<transition id="id17" controllable="false">
			<source ref="id8"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1249" y="382">move_west!</label>
			<nail x="1411" y="408"/>
		</transition>
		<transition id="id18" controllable="false">
			<source ref="id7"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1241" y="314">move_east!</label>
			<nail x="1360" y="331"/>
		</transition>
		<transition id="id19" controllable="false">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1241" y="238">move_south!</label>
			<nail x="1283" y="263"/>
		</transition>
		<transition id="id20" controllable="false">
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="1266" y="170">move_north!</label>
		</transition>
		<transition id="id21">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="833" y="136">0 == 0</label>
		</transition>
		<transition id="id22">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="901" y="-17">0 == 1</label>
		</transition>
		<transition id="id23" controllable="false">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="1062" y="59">action_completed?</label>
			<nail x="1419" y="85"/>
		</transition>
		<transition id="id24" controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="680" y="59">action_completed?</label>
			<nail x="620" y="85"/>
		</transition>
	</template>
	<template>
		<name>TurningActions</name>
		<declaration>clock c;

void turn_drone(double yaw_dx) {
    if(yaw &gt;=PI_upper &amp;&amp; yaw_dx &gt; 0) {
        yaw = PI_lower + yaw_dx;
    } else if (yaw &lt;= PI_lower &amp;&amp; yaw_dx &lt; 0) {
        yaw = PI_upper + yaw_dx;
    }else if(yaw + yaw_dx &gt; PI_upper) {
        if(yaw == PI_half_pos || yaw == PI_half_neg) {
            yaw = yaw * -1;
        }else {
            yaw = PI_lower + yaw_dx;
        }
    }else {
        yaw = yaw + yaw_dx;
    }
}


</declaration>
		<location id="id25" x="-59" y="-136">
			<name x="-85" y="-119">waiting</name>
		</location>
		<location id="id26" x="-459" y="-136">
			<name x="-476" y="-178">LEFT</name>
			<label kind="invariant" x="-484" y="-110">c &lt;= 1</label>
		</location>
		<location id="id27" x="349" y="-136">
			<name x="324" y="-178">RIGHT</name>
			<label kind="invariant" x="324" y="-110">c &lt;= 1</label>
		</location>
		<location id="id28" x="-59" y="-425">
			<name x="-102" y="-459">TURN_180_DEG</name>
			<label kind="invariant" x="-85" y="-476">c &lt;= 1</label>
		</location>
		<init ref="id25"/>
		<transition id="id29" controllable="false">
			<source ref="id28"/>
			<target ref="id25"/>
			<label kind="guard" x="25" y="-340">c == 1</label>
			<label kind="synchronisation" x="25" y="-323">action_completed!</label>
			<label kind="assignment" x="25" y="-306">c = 0,
action = -1</label>
			<nail x="17" y="-348"/>
			<nail x="17" y="-195"/>
		</transition>
		<transition id="id30" controllable="false">
			<source ref="id25"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-161" y="-391">turn_180deg?</label>
			<label kind="assignment" x="-161" y="-365">c = 0,
action = 6,
turn_drone(PI_upper)</label>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="guard" x="60" y="-85">c == 1</label>
			<label kind="synchronisation" x="59" y="-25">action_completed!</label>
			<label kind="assignment" x="59" y="-68">c = 0,
action = -1</label>
			<nail x="264" y="-93"/>
			<nail x="26" y="-93"/>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-314" y="-221">c == 1</label>
			<label kind="synchronisation" x="-314" y="-272">action_completed!</label>
			<label kind="assignment" x="-314" y="-255">c = 0,
action = -1</label>
			<nail x="-357" y="-195"/>
			<nail x="-145" y="-195"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id25"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="76" y="-161">turn_90deg_right?</label>
			<label kind="assignment" x="76" y="-221">c = 0,
action = 5,
turn_drone(half_PI_right)</label>
		</transition>
		<transition id="id34" controllable="false" color="#a9a9a9">
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-348" y="-135">turn_90deg_left?</label>
			<label kind="assignment" x="-348" y="-110">c = 0,
action = 4,
turn_drone(half_PI_left)</label>
		</transition>
	</template>
	<template>
		<name>MovingActions</name>
		<declaration>
clock c;

void move(double dir_x, double dir_y) { 
    x = x + fint(((dir_x / 2) / map_granularity));
    y = y + fint(((dir_y / 2) / map_granularity));
}</declaration>
		<location id="id35" x="238" y="110">
			<name x="228" y="76">waiting</name>
		</location>
		<location id="id36" x="238" y="459">
			<name x="221" y="476">SOUTH</name>
			<label kind="invariant" x="263" y="450">c &lt;= 1</label>
		</location>
		<location id="id37" x="-162" y="110">
			<name x="-179" y="68">WEST</name>
			<label kind="invariant" x="-187" y="136">c &lt;= 1</label>
		</location>
		<location id="id38" x="646" y="110">
			<name x="621" y="68">EAST</name>
			<label kind="invariant" x="621" y="136">c &lt;= 1</label>
		</location>
		<location id="id39" x="238" y="-238">
			<name x="221" y="-272">NORTH</name>
			<label kind="invariant" x="264" y="-246">c &lt;= 1</label>
		</location>
		<init ref="id35"/>
		<transition id="id40" controllable="false">
			<source ref="id38"/>
			<target ref="id35"/>
			<label kind="guard" x="357" y="161">c == 1</label>
			<label kind="synchronisation" x="358" y="216">action_completed!</label>
			<label kind="assignment" x="357" y="178">c = 0,
action = -1</label>
			<nail x="561" y="153"/>
			<nail x="323" y="153"/>
		</transition>
		<transition id="id41" controllable="false">
			<source ref="id37"/>
			<target ref="id35"/>
			<label kind="guard" x="0" y="25">c == 1</label>
			<label kind="synchronisation" x="-17" y="-25">action_completed!</label>
			<label kind="assignment" x="0" y="-9">c = 0,
action = -1</label>
			<nail x="-60" y="51"/>
			<nail x="152" y="51"/>
		</transition>
		<transition id="id42" controllable="false">
			<source ref="id35"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="416" y="76">move_east?</label>
			<label kind="assignment" x="416" y="17">move(0, -current_step_length),
c = 0,
action = 2 + (current_step_length * 10)</label>
		</transition>
		<transition id="id43" controllable="false" color="#a9a9a9">
			<source ref="id35"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-51" y="85">move_west?</label>
			<label kind="assignment" x="-51" y="119">move(0, current_step_length),
c = 0,
action = 0 + (current_step_length * 10)</label>
		</transition>
		<transition id="id44" controllable="false">
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="136" y="289">c == 1</label>
			<label kind="synchronisation" x="93" y="323">action_completed!</label>
			<label kind="assignment" x="102" y="238">c = 0,
action = -1</label>
			<nail x="195" y="374"/>
			<nail x="195" y="195"/>
		</transition>
		<transition id="id45" controllable="false">
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="255" y="263">move_south?</label>
			<label kind="assignment" x="255" y="280">move(current_step_length, 0),
c = 0,
action = 1 + (current_step_length * 10)</label>
		</transition>
		<transition id="id46" controllable="false">
			<source ref="id35"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="136" y="-42">move_north?</label>
			<label kind="assignment" x="136" y="-102">move(-current_step_length, 0),
c = 0,
action = 3 + (current_step_length * 10)</label>
		</transition>
		<transition id="id47" controllable="false">
			<source ref="id39"/>
			<target ref="id35"/>
			<label kind="guard" x="289" y="-111">c == 1</label>
			<label kind="synchronisation" x="289" y="-127">action_completed!</label>
			<label kind="assignment" x="289" y="-94">c = 0,
action = -1</label>
			<nail x="280" y="-153"/>
			<nail x="280" y="17"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
clock time;


// List one or more processes to be composed into a system.
system DroneController, MovingActions, TurningActions;
</system>
	<queries>
		<option key="--diagnostic" value="-1"/>
		<query>
			<formula/>
			<comment>// Learn startegy that minimize time to target</comment>
		</query>
		<query>
			<formula>strategy FastSafe = minE(distance_to_goal) [&lt;=1000]  {DroneController.DescisionState} -&gt; {x,y,yaw}  : &lt;&gt; (DroneController.target || time &gt;= 4)</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1000;1]{x,y}: DroneController.target under FastSafe</formula>
			<comment/>
			<result outcome="success" type="interval" value="≥ 0.025 (95% CI)" timestamp="2024-02-19 10:25:32 +0100">
				<option key="--diagnostic" value="-1"/>
				<details>≥ 0.025 (95% CI)</details>
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="x" type="l" color="0xff0000" encoding="csv">0.0,0.0
9.0,0.0
9.0,1.0
10.0,1.0
10.0,2.0
11.0,2.0
11.0,3.0
12.0,3.0
12.0,4.0
13.0,4.0
13.0,5.0
14.0,5.0
14.0,6.0
15.0,6.0
					</series>
					<series title="y" type="l" color="0x00ffff" encoding="csv">0.0,0.0
0.0,1.0
1.0,1.0
1.0,2.0
2.0,2.0
2.0,3.0
3.0,3.0
3.0,4.0
4.0,4.0
4.0,5.0
5.0,5.0
5.0,6.0
6.0,6.0
6.0,7.0
7.0,7.0
7.0,8.0
15.0,8.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>saveStrategy("/home/sw9-bois/UPPAAL-TO-ROS-SIMULATION/uppaal_models/fast.json", FastSafe)</formula>
			<comment/>
			<option key="--diagnostic" value="-1"/>
			<result outcome="success" type="quality" timestamp="2024-01-11 15:18:50 +0100">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>// Can TurningActions and MovingActions be out of the waiting state at the same time?</comment>
		</query>
		<query>
			<formula>A[] !TurningActions.waiting &amp;&amp; !MovingActions.waiting</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-02-15 12:46:34 +0100">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>strategy FastSafeOLD = minE(time) [&lt;=1000]  {x,y} -&gt; {}  : &lt;&gt; DroneController.target</formula>
			<comment/>
		</query>
	</queries>
</nta>
